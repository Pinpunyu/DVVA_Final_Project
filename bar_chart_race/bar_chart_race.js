/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./bar_chart_race.js":
/*!***************************!*\
  !*** ./bar_chart_race.js ***!
  \***************************/
/***/ (() => {

eval("const margin = {top:50,right:20,bottom:10,left:150};\nconst width = 1080 - margin.left - margin.right;\nconst height = 720 - margin.top - margin.bottom;\n\nlet isPlaying = false;\nlet i = 0;\nlet years = [];\nlet dataByYear;\nlet sliderScale;\nlet sliderHandle;\n\n\nconst markerNumbers = [10000000,20000000,30000000];\nconst continents = [\"Asia\",\"Europe\",\"Africa\",\"Oceania\",\"North America\",\"South America\"]\nlet selectedContinent = continents[0];\n\nconst svg = d3.select(\"#chart-container\")\n    .append(\"svg\")\n    .attr(\"width\",width + margin.left + margin.right)\n    .attr(\"height\",height + margin.top + margin.bottom)\n\nconst titleGroup = svg.append(\"g\")\n    .attr(\"class\", \"title-group\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top / 2})`);\n\nconst chartGroup = svg.append(\"g\")\n    .attr(\"class\", \"chart-group\")\n    .attr(\"transform\", `translate(${margin.left + 50}, ${margin.top+20})`);\n\nconst sliderGroup = svg.append(\"g\")\n    .attr(\"class\", \"slider-group\")\n    .attr(\"transform\", `translate(${margin.left}, ${height + margin.top-50})`);\n\nconst markerGroup = chartGroup.append(\"g\")\n    .attr(\"class\",\"marker-line-group\");\n\ntitleGroup.append(\"text\")\n    .attr(\"id\", \"chart-title\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 0)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Air Pollution Death Rates by Country\");\n//Year Text\nconst year_text = sliderGroup.append(\"text\")\n    .attr(\"id\",\"year-text\")\n    .attr(\"x\",width);\n\nconst play_button_group = svg\n    .append('g')\n    .attr(\"class\", \"play-button-group\")\n    .attr(\"transform\", `translate(50, ${height + margin.top -65})`)\n    .style(\"cursor\", \"pointer\")\n    .on(\"mouseover\", function () {\n        d3.select(\"#play-button-rect\").transition(\"0.3s\").attr(\"fill\", \"#0069d9\")\n            .attr(\"transform\",\"translate(0,-5)\");\n\n        d3.select(\"#play_button_text\").transition(\"0.3s\").attr(\"transform\",\"translate(0,-5)\");\n    })\n    .on(\"mouseout\", function () {\n        d3.select(\"#play-button-rect\").transition(\"0.3s\").attr(\"fill\", \"#007bff\")\n            .attr(\"transform\",\"translate(0,0)\");\n        d3.select(\"#play_button_text\").transition(\"0.3s\").attr(\"transform\",\"translate(0,0)\");\n    })\n    .on(\"click\",()=>{\n        isPlaying = !isPlaying;\n        play_button.text(isPlaying?\"Pause\":\"Play\");\n        if(isPlaying)\n            play();\n    });\n\nplay_button_group.append(\"rect\")\n    .attr(\"id\",\"play-button-rect\")\n    .attr(\"width\", 80)\n    .attr(\"height\", 30)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n  \n\nconst play_button = play_button_group\n    .append(\"text\")\n    .attr(\"id\",\"play_button_text\")\n    .attr('x',40)\n    .attr('y',20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"fill\", \"white\")\n    .text(\"Play\");\n\nconst slider = sliderGroup.append(\"g\")\n    .attr(\"class\",\"slider\");\n\nconst continentSelector = d3.select(\"#chart-container\")\n    .append(\"select\")\n    .attr(\"id\", \"continent-selector\")\n    .on(\"change\", function () {\n        selectedContinent = this.value;\n        renderChart();\n    });\n\ncontinentSelector.selectAll(\"option\")\n    .data(continents)\n    .enter()\n        .append(\"option\")\n        .attr(\"value\", d => d)\n        .text(d => d);\n//Scale setting\nconst x_scale = d3.scaleLinear().range([0,width*0.8])\nconst y_scale = d3.scaleBand().range([0,height * 0.8]).padding(0.1);\nconst colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n\n\nfunction play(){\n    if(i>=dataByYear.length){\n        i = 0;\n        isPlaying = false;\n        play_button.text(\"Play\");\n    }\n    if(i < dataByYear.length && isPlaying){\n        const previousData = i > 0 ? dataByYear[i - 1].data : null;\n        update(dataByYear[i].data,previousData);\n        sliderHandle.transition().duration(500).attr(\"cx\",function() {\n            const interpolate = d3.interpolate(sliderHandle.attr(\"cx\"), sliderScale(dataByYear[i].year));\n            return function(t) {\n                return interpolate(t);\n            };\n        }).attr(\"cx\", sliderScale(dataByYear[i].year));\n        i++;\n        setTimeout(play,1000);\n    }\n}\nfunction interpolateData(previousData, currentData, alpha = 0.2) {\n    const interpolated = currentData.map(curr => {\n        const prev = previousData ? previousData.find(p => p.country === curr.country) : { Pollution: 0 };\n\n        const delta = (curr?.Pollution ?? 0) - (prev?.Pollution ?? 0);\n        return {\n            country: curr.country,\n            Pollution: (prev?.Pollution ?? 0) + alpha * delta\n        };\n    });\n    return interpolated;\n}\n\nfunction update(yearData,previous_data){\n    // x_scale.domain([0,d3.max(yearData, d=>+d.Pollution)]);\n    y_scale.domain(yearData.map(d=>d.country));\n\n    // const data_to_use = previous_data ?interpolateData(previous_data,yearData,0.2):yearData;\n    // const bars = chartGroup.selectAll(\".bar\")\n    //     .data(data_to_use,d=>d.country);\n    const interpolations = previous_data ? Array.from({ length: 5 }, (_, step) => interpolateData(previous_data, yearData, step / 5)) : [yearData];\n    interpolations.forEach((data, index) => {\n        setTimeout(() => {\n            const dataToUse = data;\n            const bars = chartGroup.selectAll(\".bar\")\n                .data(dataToUse, d => d.country);\n\n            bars.enter()\n                    .append(\"rect\")\n                    .attr(\"class\", \"bar\")\n                    .attr(\"y\", d => y_scale(d.country))\n                    .attr(\"height\", y_scale.bandwidth())\n                    .attr(\"x\", 0)\n                    .attr(\"fill\", d => colorScale(d.country))\n                .merge(bars)\n                    .transition().ease(d3.easeLinear).duration(150)\n                    .attr(\"y\", d => y_scale(d.country))\n                    .attr(\"width\", d => x_scale(+d.Pollution));\n\n            bars.exit().remove();\n\n            const valueLabels = chartGroup.selectAll(\".value-label\")\n                .data(dataToUse, d => d.country);\n\n            valueLabels.enter()\n                    .append(\"text\")\n                    .attr(\"class\", \"value-label\")\n                    .attr(\"y\", d => y_scale(d.country) + y_scale.bandwidth() / 2)\n                    .attr(\"x\", d => x_scale(d.Pollution) + 10)\n                    .attr(\"dy\", \"0.35em\")\n                    .text(d => d3.format(\",.0f\")(d.Pollution))\n                .merge(valueLabels)\n                    .transition()\n                    .ease(d3.easeLinear).duration(150)\n                    .attr(\"x\", d => x_scale(d.Pollution) + 10)\n                    .attr(\"y\", d => y_scale(d.country) + y_scale.bandwidth() / 2)\n                    .text(d => d3.format(\",.0f\")(d.Pollution));\n\n            valueLabels.exit().remove();\n\n            const labels = chartGroup.selectAll(\".bar-label\")\n                .data(dataToUse,d=>d.country);\n\n            labels.enter()\n                .append(\"text\")\n                .attr(\"class\",\"bar-label\")\n                .attr(\"y\",d=>y_scale(d.country) + y_scale.bandwidth()/2)\n                .attr(\"x\",-10)\n                .attr(\"dy\",\"0.35em\")\n                .style(\"text-anchor\",\"end\")\n                .text(d=>d.country)\n                .merge(labels)\n                    .transition().ease(d3.easeLinear).duration(150)\n                    .attr(\"y\",d=>y_scale(d.country) + y_scale.bandwidth()/2);\n            \n            labels.exit().remove();\n        }, index * 150);\n    });\n    year_text.text(yearData[0].Year);\n}\n\nasync function renderChart() {\n    //Data prepare\n    const data = await d3.csv(\"../data/death-rates-from-air-pollution.csv\");\n    data.forEach(d=>{\n        d.Year = +d.Year; \n        d.country = d.Entity;\n        d.Pollution = +d[\"Air pollution (total) (deaths per 100,000)\"]*100000;\n        d.Continent = d.Continent || \"Unknown\";\n    })\n   \n    const filteredData = data.filter(d => d.Continent === selectedContinent);\n        \n    const maxDeath = d3.max(filteredData.map(d=>d.Pollution));\n    x_scale.domain([0,maxDeath]);\n\n    markerGroup.selectAll(\"*\").remove();\n    markerNumbers.forEach(value=>{\n        markerGroup.append(\"line\")\n                .attr(\"x1\",x_scale(value))\n                .attr(\"y1\",0)\n                .attr(\"x2\",x_scale(value))\n                .attr(\"y2\",height*0.8)\n                .attr(\"stroke\", \"gray\")\n                .attr(\"stroke-dasharray\", \"4 2\")\n                .attr(\"stroke-width\", 2);\n        \n        markerGroup.append(\"text\")\n            .attr(\"x\",x_scale(value))\n            .attr(\"y\",-10)\n            .style(\"fill\", \"gray\")\n            .style(\"font-size\", \"12px\")\n            .attr(\"text-anchor\",\"middle\")\n            .text(`${value}`);\n    });\n\n    years = Array.from(new Set(filteredData.map(d=>d.Year)));\n\n    dataByYear = years.map(year =>{\n        return{\n            year:year,\n            data:filteredData\n                .filter(d=>d.Year == year)\n                .sort((a,b) => b.Pollution - a.Pollution)\n                .slice(0,10)\n        }\n    })\n    slider.selectAll(\"*\").remove();\n    sliderScale = d3.scaleLinear()\n        .domain([Math.min(...years),Math.max(...years)])\n        .range([0,width*0.9])\n        .clamp(true);\n\n    const sliderTrack = slider.append(\"line\")\n        .attr(\"class\",\"track\")\n        .attr(\"x1\",sliderScale.range()[0])\n        .attr(\"x2\",sliderScale.range()[1])\n        .attr(\"stroke\",\"#ccc\")\n        .attr(\"stroke-width\",4);\n\n    sliderHandle = slider.append(\"circle\")\n        .attr(\"class\",\"handle\")\n        .attr(\"r\",8)\n        .attr(\"cx\",sliderScale(years[0]))\n        .attr(\"fill\",\"#555\")\n\n\n    slider.on(\"mousedown\",function(){\n        const [x] = d3.mouse(this);\n        const year = Math.round(sliderScale.invert(x));\n        sliderHandle.transition().ease(d3.easeLinear).duration(1000).attr(\"cx\",sliderScale(year));\n        update(dataByYear.find(d=>d.year == year).data);\n        isPlaying = false;\n        //play_button.text(\"Play\");\n    });\n\n    update(dataByYear[0].data);\n}\n\nrenderChart();\n\n//# sourceURL=webpack://barchartrace/./bar_chart_race.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./bar_chart_race.js"]();
/******/ 	
/******/ })()
;